import Head from 'next/head';

import {FormGroup} from '@/components/FormGroup';
import { Button } from '@/components/Button';
import { useState, useEffect } from 'react';

import { useRequesthandler } from '@/hooks/useRequesthandler';
import { AppHeader } from '@/components/layout/AppHeader';
import { Provider } from 'react-redux';

import { store } from '../store/index';

export default function Home() {
    interface FormRegisterDataTypes { username: '', password: '', email: ''}
    const formData: FormRegisterDataTypes = {username: '', password: '', email: ''};
    const [formDataFormatted, setFormDataFormatted] = useState<FormRegisterDataTypes>(formData);
    const showRegisterForm: boolean = false;
    const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);

    useEffect(() => {
        async function checkIfLoggedIn() {
            useRequesthandler('http://localhost:8081/', 'user/isloggedin', 'POST', {}).then((res) => {
                if (res.status === 200) {
                    setIsLoggedIn(true);
                }
            }).catch((error) => {
                setIsLoggedIn(false);
            });
        }

        checkIfLoggedIn();
    }, []);

    const handleSubmitRegister = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (showRegisterForm) {
            await useRequesthandler('http://localhost:8081/', 'user/create', 'POST', formDataFormatted).then((response) => {                
                if (response) {
                    console.log(response.data);
                }
            });
        } else {
            await useRequesthandler('http://localhost:8081/', 'user/login', 'POST', formDataFormatted).then((response) => {
                if (response.status === 200) {
                    console.log(response.data);
                    setIsLoggedIn(true);
                }
            });
        }
    };

    const handleLogOut = async () => {
        await useRequesthandler('http://localhost:8081/', 'user/logout', 'POST', formDataFormatted).then((response) => {
            if (response.status === 200) {
                console.log(response.data);
                setIsLoggedIn(false);
            }
        });
    }

    const formInputs = showRegisterForm ? [
        {
            title: 'Brukernavn',
            name: 'username',
            type: 'text',
            attribute: 'username',
        },
        {
            title: 'Passord',
            name: 'password',
            type: 'password',
            attribute: 'current-password',
        },
        {
            title: 'E-post',
            name: 'email',
            type: 'email',
            attribute: 'email',
        },
    ] : [
        {
            title: 'Brukernavn',
            name: 'username',
            type: 'text',
            attribute: 'username',
        },
        {
            title: 'Passord',
            name: 'password',
            type: 'password',
            attribute: 'current-password',
        },
    ];

    const inputOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const {name, value} = event.target
        const newData = {...formDataFormatted, [name]: value};
        console.log(newData);
        setFormDataFormatted(newData);
    };

    return (
        <Provider store={store}>
            <Head>
                <title>Cool title</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className="app">
                    <AppHeader />

                    <div className="container mt-20">
                        {isLoggedIn ? (
                            <div className="container"> 
                                <div className="container-title">
                                    Du er n√• logget inn! {formDataFormatted.username}
                                </div>
                                <div className="mx-auto mt-20">
                                    <Button
                                        title="Logg ut"
                                        onClick={handleLogOut}
                                        type="success"
                                    />
                                </div>
                            </div>
                        ) : (
                            <form className="form bg-dark" onSubmit={(e) => handleSubmitRegister(e)}>
                                <div className="form-title">
                                    {showRegisterForm ? 'Logg inn' : 'Registrer'}
                                </div>
                                {formInputs.map((input, key) => (
                                    <FormGroup
                                        data={input}
                                        key={key}
                                        inputOnChange={inputOnChange}
                                    />
                                ))}

                                <FormGroup
                                    data={{
                                        title: '',
                                        name: 'submit',
                                        type: 'submit',
                                        attribute: '',
                                    }}
                                    inputOnChange={() => {}}
                                />
                            </form>
                        )}
                        
                    </div>
                </div>
            </main>
        </Provider>
    );
}
